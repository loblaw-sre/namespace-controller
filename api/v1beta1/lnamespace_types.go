/*
Copyright 2020.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1beta1

import (
	rbacv1 "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// LNamespaceSpec defines the desired state of LNamespace
type LNamespaceSpec struct {
	// IstioRevision determines which istio control plane to associate with. Defaults to cluster default.
	// +optional
	IstioRevision string `json:"istioRevision,omitempty"`
	// Managers are bound only
	Managers []rbacv1.Subject `json:"managers,omitempty"`

	// NamespaceLabelOverrides contains additional labels to add to the
	// underlying namespace defintion. In the case where a label defined
	// here is also generated by the controller or already present on an
	// inherited namespace, the custom label will override the default.
	// +optional
	NamespaceLabelOverrides map[string]string `json:"namespaceLabelOverrides,omitempty"`

	// Sudoers holds a list of names of users or groups allowed to sudo.
	// +optional
	Sudoers []rbacv1.Subject `json:"sudoers,omitempty"`

	// Developers holds a list of regular developers allowed to edit common resources.
	// +optional
	Developers []rbacv1.Subject `json:"users,omitempty"`

	// Billing holds billing information.
	Billing map[string]string `json:"billing,omitempty"`
}

// LNamespaceStatus defines the observed state of LNamespace
type LNamespaceStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file

}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,shortName=lns

// LNamespace is the Schema for the namespaces API
type LNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   LNamespaceSpec   `json:"spec"`
	Status LNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LNamespaceList contains a list of LNamespace
type LNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LNamespace `json:"items"`
}

// GetSudoersGroupName returns the name of the sudoers group for this namespace
func (ns *LNamespace) GetSudoersGroupName() string {
	return ns.Name + "-sudoers"
}

func init() {
	SchemeBuilder.Register(&LNamespace{}, &LNamespaceList{})
}
